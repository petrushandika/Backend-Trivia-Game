datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int     @id @default(autoincrement())
  username String? @unique
  email    String  @unique
  password String?
  googleId String
  diamond  Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoice         Invoice[]
  userAvatar      UserAvatar[]
  userAnswer      UserAnswer[]
  usersMatches    UserMatches[]
  diamondPurchase DiamondPurchase[]
}

model DiamondPurchase {
  id               Int            @id @default(autoincrement())
  userId           Int
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  diamondPackageId Int
  diamondPackage   DiamondPackage @relation(fields: [diamondPackageId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now())
}

model DiamondPackage {
  id        Int      @id @default(autoincrement())
  name      String?
  image     String
  price     Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoices        Invoice[]
  DiamondPurchase DiamondPurchase[]
}

model Invoice {
  id               Int            @id @default(autoincrement())
  status           String
  amount           Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           Int
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  diamondPackageId Int
  diamondPackage   DiamondPackage @relation(fields: [diamondPackageId], references: [id], onDelete: Cascade)
}

model Avatar {
  id        Int     @id @default(autoincrement())
  image     String
  isPremium Boolean

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  userAvatar UserAvatar[]
}

model UserAvatar {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatarId Int
  avatar   Avatar @relation(fields: [avatarId], references: [id], onDelete: Cascade)
}

model Match {
  id        Int      @id @default(autoincrement())
  status    String
  startTime DateTime
  endTime   DateTime

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  usersMatches UserMatches[]
}

model UserMatches {
  id      Int @id @default(autoincrement())
  score   Int
  ranking Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchId Int
  match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
}

model Question {
  id       Int    @id @default(autoincrement())
  content  String
  maxScore Int
  timer    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    Answer[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  content   String
  isCorrect Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionId Int
  question   Question     @relation(fields: [questionId], references: [id])
  userAnswer UserAnswer[]
}

model UserAnswer {
  id         Int      @id @default(autoincrement())
  isCorrect  Boolean
  score      Int      @default(1000)
  answerTime Int      @default(30)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId   Int
  answerId Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer   Answer @relation(fields: [answerId], references: [id])
}
