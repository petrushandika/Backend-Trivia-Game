datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  email    String  @unique
  password String?
  googleId String
  diamond  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoice      Invoice[]
  userAvatar   UserAvatar[]
  userAnswer   UserAnswer[]
  usersMatches UserMatches[]
}

model Invoice {
  id     Int    @id @default(autoincrement())
  status String
  amount Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Avatar {
  id        Int     @id @default(autoincrement())
  image     String
  isPremium Boolean

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  userAvatar UserAvatar[]
}

model UserAvatar {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  avatarId Int
  avatar   Avatar @relation(fields: [avatarId], references: [id])
}

model Match {
  id        Int      @id @default(autoincrement())
  status    String
  startTime DateTime
  endTime   DateTime

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  usersMatches UserMatches[]
}

model UserMatches {
  id      Int @id @default(autoincrement())
  score   Int
  ranking Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId  Int
  user    User  @relation(fields: [userId], references: [id])
  matchId Int
  match   Match @relation(fields: [matchId], references: [id])
}

model Question {
  id       Int    @id @default(autoincrement())
  content  String
  maxScore Int
  timer    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  answer    Answer[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  content   String
  isCorrect Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  questionId Int
  question   Question     @relation(fields: [questionId], references: [id])
  userAnswer UserAnswer[]
}

model UserAnswer {
  id         Int      @id @default(autoincrement())
  isCorrect  Boolean
  score      Int      @default(1000)
  answerTime Int      @default(30)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  userId     Int
  answerId   Int
  user       User     @relation(fields: [userId], references: [id])
  answer     Answer   @relation(fields: [answerId], references: [id])
}
